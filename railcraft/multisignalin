--
-- plug 4 different bundled cables in:
--
-- left, back, right are for the 3 parallel block controllers
--   pre-detector -> red, magenta, pink
--   blue -> switch A/B
--   lightBlue -> switch B/C
--   purple -> switch C/X (unused)
--   parallel block "red" -> green, cyan, yellow
--   parallel block "green" -> gray, lightGray, white
--
-- front:
--   next block "red" -> lime
--   green -> previous block "green"
--   red  -> previous block "red"
--

-- config

cable_input =  { "back", "back", "back", "front" }
cable_output = { "back", "back", "back", "front" }

-- in (back)
cable_input_red2   = { colors.red,  colors.magenta,  colors.pink, }
cable_input_green2 = { colors.green, colors.cyan, colors.yellow }

-- in (front)
cable_input_green3 = colors.lime

-- out (back)
cable_output_green3  = { colors.gray, colors.lightGray, colors.white }
cable_output_switch2 = { colors.blue,  colors.lightBlue,  colors.purple }

-- out (front)
cable_output_green1 =  colors.green
cable_output_red1   =  colors.red

-- end config

-- true=free, false=used
state_signal = { true, true, true }

raise_state_red2   = { false, false, false }
raise_state_green2 = { false, false, false }
raise_state_green3 = false

cable_state_switch2 = { true, true, true }
cable_pulse_green3  = { false, false, false }
cable_state_red1   = true
cable_pulse_green1 = false

used_old = nil

state_old = { {}, {} }

local function saveState()
	-- has something changed?
	if shallowcompare(state_old[1], state_signal) and shallowcompare(state_old[2], cable_state_switch2) then
		return
	end

	f = fs.open("multi-"..tostring(os.getComputerID())..".state", "wb")
	for i=1,#state_signal do
		if state_signal[i] then
			f.write(1)
		else
			f.write(0)
		end
	end
	for i=1,#cable_state_switch2 do
		if cable_state_switch2[i] then
			f.write(1)
		else
			f.write(0)
		end
	end
	f.close()
	
	state_old[1] = shallowcopy(state_signal)
	state_old[2] = shallowcopy(cable_state_switch2)
end

local function restoreState()
	f = fs.open("multi-"..tostring(os.getComputerID())..".state", "rb")
	if f ~= nil then
		for i=1,#state_signal do
			if f.read() == 1 then
				state_signal[i] = true
			else
				state_signal[i] = false
			end
		end
		for i=1,#cable_state_switch2 do
			if f.read() == 1 then
				cable_state_switch2[i] = true
			else
				cable_state_switch2[i] = false
			end
		end
		f.close()
	end
	state_old[1] = shallowcopy(state_signal)
	state_old[2] = shallowcopy(cable_state_switch2)
end

local function calculateUsed()
	local used = 0
	local usedp = { nil, nil, nil }
	for i=1,#state_signal do
		if not state_signal[i] then
			used = used + 1
			usedp[used] = i
		end
	end
	
	return used, usedp
end

local function printHeader()
	local w, h = term.getSize()
	
	term.setCursorPos(1,1)
	print("Multi Block Processor #", os.getComputerID())
	
	term.setCursorPos(1, h-1)
	print("=== Press Q to terminate. ===")

	term.setCursorPos(1, 7)
end

local function updateState()
	saveState()

	for i=1,#state_signal do
		-- send power to switch track
		if cable_output_switch2[i] ~= nil then
			setBundledState(cable_output[i], cable_output_switch2[i], cable_state_switch2[i])
		end
		
		-- puls green to parallel block
		if cable_pulse_green3[i] then
			debugPrint("Free Block #", i)
			cable_pulse_green3[i] = false
			pulseBundledState(cable_output[i], cable_output_green3[i], true)
		end
	end

	-- send red to previous block
	setBundledState(cable_output[4], cable_output_red1, cable_state_red1)

	-- pulse green to previous block
	if cable_pulse_green1 then
		debugPrint("Free Input")
		cable_pulse_green1 = false
		pulseBundledState(cable_output[4], cable_output_green1, true)
	end
end

local function printState()
	term.setCursorPos(1, 2)
	used, usedp = calculateUsed()
	print("Free Tracks: ", (#state_signal)-used)

	term.clearLine(4)
	print("T #1: ", state_signal[1], "  #2: ", state_signal[2], "  #3: ", state_signal[3])
	term.clearLine(5)
	print("S #1: ", cable_state_switch2[1], "  #2: ", cable_state_switch2[2], "  #3: ", cable_state_switch2[3])
end

-- end functions

-- reset terminal
term.clear()

shell.run('debug.lua')
shell.run('bundle.lua')

setDebug("right", 1)
enableDebug()

-- reset cable
for i=1,#cable_output do
	rs.setBundledOutput(cable_output[i], 0)
end

-- initial print
restoreState()
updateState()
printState()

while true do
	printHeader()

	local event, param = os.pullEvent()
	
	if event == "char" then
		if string.lower(param) == "q" then
			term.clear()
			term.setCursorPos(1, 1)
			break
		end
		if string.lower(param) == "d" then
			toggleDebug()
		end
	end
	
	if event == "timer" then
		state_timer = false
	end
	
	if event == "redstone" then
		for i=1,#state_signal do
			local input_state = rs.getBundledInput(cable_input[i])
			
			if colors.test(input_state, cable_input_red2[i]) then
				if not raise_state_red2[i] then
					--debugPrint("Raising Red #", i, " ...")
					raise_state_red2[i] = true
					
					debugPrint("Block #", i, " occupied")
				end

				-- block is occupied now
				
				-- react on active cable (block marked as red)
				state_signal[i] = false

				-- instantly activate switch-track
				cable_state_switch2[i] = false
			else
				if raise_state_red2[i] then
					--debugPrint("Falling Red #", i, " ...")
					raise_state_red2[i] = false
				end
			end
		
			if colors.test(input_state, cable_input_green2[i]) then
				if not raise_state_green2[i] then
					--debugPrint("Raising Green #", i, " ...")
					raise_state_green2[i] = true
				end
			else
				if raise_state_green2[i] then
					--debugPrint("Falling Green #", i, " ...")
					raise_state_green2[i] = false
					
					debugPrint("Block #", i, " freed")

					-- block is now free
					
					-- react on falling edge (block marked as green)
					state_signal[i] = true

					-- deactivate switch-track
					cable_state_switch2[i] = true
				end
			end
		end
		
		local input_state = rs.getBundledInput(cable_input[4])
		if colors.test(input_state, cable_input_green3) then
			if not raise_state_green3 then
				--debugPrint("Raising Out Green ...")
				raise_state_green3 = true
			end
		else
			if raise_state_green3 then
				--debugPrint("Falling Out Green ...")
				raise_state_green3 = false
				
				if not state_timer then
					state_timer = true
					os.startTimer(2)
				
					debugPrint("Output freed")

					-- path is now free
					-- now activate one of the (used) 3 blocks

					local used, usedp = calculateUsed()
					if used ~= 0 then
						-- react on falling edge (path marked as green)
						local free = math.random(1, used)
						cable_pulse_green3[usedp[free]] = true
						--debugPrint("Used: ", used, " freeing #", free, " => ", usedp[free])
					end
				end
			end
		end
	end
	
	local pathToParallelUsed = false
	for i=1,#state_signal do
		if raise_state_red2[i] then
			pathToParallelUsed = true
		end
	end
	
	local used, usedp = calculateUsed()
	if used == #state_signal or pathToParallelUsed then
		cable_state_red1 = true
		used_old = nil
	else
		cable_state_red1 = false
		if used_old == nil or used_old ~= used then
			cable_pulse_green1 = true
			used_old = used
		end
	end
	
	updateState()
	printState()
end

-- reset cable on exit
for i=1,#cable_output do
	rs.setBundledOutput(cable_output[i], 0)
end

-- eof