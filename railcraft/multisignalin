-- being config

cable = "back"

-- in
signal_red2 = { colors.red, colors.magenta, colors.orange }
signal_green2 = { colors.green, colors.cyan, colors.yellow }

-- out
signal_green1 = colors.lime
signal_red1 = colors.lightGray
signal_switch2 = { colors.blue, colors.lightBlue }

-- end config

state_red = { false, false, false }
state_green2 = { false, false, false }
state_switch2 = { false, false }

local function debugPrint(text, ... )
	if not debug then
		return
	end

	term.setCursorPos(1, 6+debug_lines)
	print(text, ...)
	term.clearLine(debug_lines + 1)
	
	local w, h = term.getSize()
	debug_lines = (debug_lines + 1) % (h-6)
end

local function clearDebug()
	local w, h = term.getSize()
	for i=6,h-6 do
		term.clearLine(i)
	end
end

local function setBundledState(cable, color, state)
	local oldcolor = rs.getBundledOutput(cable)

	if state then
		oldcolor = colors.combine(oldcolor, color)
	else
		oldcolor = colors.subtract(oldcolor, color)
	end

	rs.setBundledOutput(cable, oldcolor)
end

local function printHeader()
	local w, h = term.getSize()
	
	term.setCursorPos(1,1)
	print("Signal Block Processor")
	
	term.setCursorPos(1,3)
	print("Config: Cable at ", cable)

	term.setCursorPos(1, h-1)
	print("=== Press Q to terminate. ===")

	term.setCursorPos(1, 6)
end

local function updateState()
	-- set signal state
	if initialize or state_signal_old == not state_signal then
		initialize = false
		
		if state_signal then
			debugPrint("Switching Signal to Green")
		else
			debugPrint("Switching Signal to Red")
		end
		
		-- send light signal to previous block
		setBundledState(cable, signal_red1, not state_signal)
		
		-- send block state to previous block
		if state_signal then
			setBundledState(cable, signal_green1, true)
			sleep(0.1)
			setBundledState(cable, signal_green1, false)
		end
	end
end

-- end functions

-- reset cable
rs.setBundledOutput(cable, 0)

-- reset terminal
term.clear()

while true do
	--printHeader()

	local event, param = os.pullEvent()
	
	if event == "char" then
		if string.lower(param) == "q" then
			term.clear()
			term.setCursorPos(1, 1)
			print("Program terminated.")
			break
		end
	end
	
	state_signal_old = state_signal
	
	local state = rs.getBundledInput(cable)
	
	if event == "redstone" then
		local state = rs.getBundledInput(cable)
		
		-- directly set red
		for i=1,#signal_red do
			if colors.test(state, signal_red2[i]) then
				if not state_red2[i] then
					debugPrint("Raising Red #", i, " ...")
					state_red2[i] = true
				end
				state_signal = false
			else
				state_red2[i] = false
			end
		end
		
		for i=1,#signal_green do
			-- react on falling edge
			if colors.test(state, signal_green2[i]) then
				if not state_green2[i] then
					debugPrint("Raising Green #", i, " ...")
					state_green2[i] = true
				end
			else
				if state_green2[i] then
					debugPrint("Falling Green #", i, " ...")
					-- state_signal = true
				end
				state_green2[i] = false
			end
		end
		
		-- os.startTimer event == timer
	end
end

-- reset cable on exit
rs.setBundledOutput(cable, 0)

-- eof