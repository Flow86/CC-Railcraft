-- being config

cable = "back"

signal_red2 = colors.red
signal_green2 = colors.green
signal_green1 = colors.lime
signal_track2 = colors.gray
signal_light2 = colors.lightGray

-- end config

-- false = red, true = green
state_signal = false

initialize = true

state_red2 = false
state_green2 = false

debug = false
debug_lines = 0

-- end vars

local function debugPrint(text, ... )
	if not debug then
		return
	end

	term.setCursorPos(1, 6+debug_lines)
	print(text, ...)
	term.clearLine(debug_lines + 1)
	
	local w, h = term.getSize()
	debug_lines = (debug_lines + 1) % (h-6)
end

local function clearDebug()
	local w, h = term.getSize()
	for i=6,h-6 do
		term.clearLine(i)
	end
end

local function setBundledState(cable, color, state)
	local oldcolor = rs.getBundledOutput(cable)

	if state then
		oldcolor = colors.combine(oldcolor, color)
	else
		oldcolor = colors.subtract(oldcolor, color)
	end

	rs.setBundledOutput(cable, oldcolor)
end

local function printHeader()
	local w, h = term.getSize()
	
	term.setCursorPos(1,1)
	print("Signal Block Processor")
	
	term.setCursorPos(1,3)
	print("Config: Cable at ", cable)

	term.setCursorPos(1, h-1)
	print("=== Press Q to terminate. ===")

	term.setCursorPos(1, 6)
end

local function updateState()
	-- set signal state
	if initialize or state_signal_old == not state_signal then
		initialize = false
		
		if state_signal then
			debugPrint("Switching Signal to Green")
		else
			debugPrint("Switching Signal to Red")
		end
		
		-- set state of lockdown track
		setBundledState(cable, signal_track2, state_signal)
		setBundledState(cable, signal_light2, not state_signal)
		
		-- send block state to previous block
		if state_signal then
			setBundledState(cable, signal_green1, true)
			sleep(0.1)
			setBundledState(cable, signal_green1, false)
		end
	end
end

local function printState()
	term.setCursorPos(1, 4)
	
	if state_signal then
		print("State:  Green")
	else
		print("State:  Red  ")
	end
end

-- end functions

-- reset cable
rs.setBundledOutput(cable, 0)

-- reset terminal
term.clear()

-- initial print
updateState()
printState()

while true do
	printHeader()

	local event, param = os.pullEvent()
	
	if event == "char" then
		if string.lower(param) == "q" then
			term.clear()
			term.setCursorPos(1, 1)
			print("Program terminated.")
			break
		end
		if string.lower(param) == "d" then
			debug = not debug
			clearDebug()
			debugPrint("Debug State: ", debug)
		end
	end
	
	state_signal_old = state_signal
	
	local state = rs.getBundledInput(cable)
		
	--print(state)

	if event == "redstone" then
		-- directly set red
		if colors.test(state, signal_red2) then
			if not state_red2 then
				debugPrint("Raising Red ...")
				state_red2 = true
			end
			state_signal = false
		else
			state_red2 = false
		end
		
		-- react on falling edge
		if colors.test(state, signal_green2) then
			if not state_green2 then
				debugPrint("Raising Green ...")
				state_green2 = true
			end
		else
			if state_green2 then
				debugPrint("Falling Green ...")
				state_signal = true
			end
			state_green2 = false
		end
	end

	updateState()
	printState()
end

-- reset cable on exit
rs.setBundledOutput(cable, 0)

-- EOF
