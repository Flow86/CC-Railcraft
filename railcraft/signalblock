--
-- plug bundled cable in
--
-- front:
--   next block "lime" -> green
--   post-detector -> red 
--   gray -> lockdown track
--   lightGray -> Controller-Box paired to Distant Signal
--   lime -> previous block "green"
--

-- config

cable_input  = "front"
cable_output = "front"

-- in
cable_input_red2   = colors.red
cable_input_green2 = colors.green

-- out
cable_output_green1 = colors.lime
cable_output_track2 = colors.gray
cable_output_light2 = colors.lightGray

-- end config

-- false = red, true = green
state_signal = false
state_signal_old = nil

raise_state_red2 = false
raise_state_green2 = false

-- end vars

local function saveState()
	f = fs.open("signal.state", "w")
	f.write(signal_state)
	f.close()
end

local function restoreState()
	f = fs.open("signal.state", "r")
	if f ~= nil then
		signal_state = f.readAll()
		f.close()
	end
end

local function printHeader()
	local w, h = term.getSize()
	
	term.setCursorPos(1,1)
	print("Signal Block Processor (I:", cable_input, ", O:", cable_output, ")")
	
	term.setCursorPos(1, h-1)
	print("=== Press Q to terminate. ===")

	term.setCursorPos(1, 4)
end

local function updateState()

	-- set signal state
	if state_signal_old == nil or state_signal_old ~= state_signal then
		saveState()
		if state_signal then
			debugPrint("Switching Signal to Green")
		else
			debugPrint("Switching Signal to Red")
		end
		
		-- set state of lockdown track and light
		setBundledState(cable_output, cable_output_track2, state_signal)
		setBundledState(cable_output, cable_output_light2, not state_signal)
		
		-- send block state to previous block
		if state_signal then
			pulseBundledState(cable_output, cable_output_green1, true)
		end
	end
	
	state_signal_old = state_signal
end

local function printState()
	term.setCursorPos(1, 2)
	
	if state_signal then
		print("Signal State:  Green")
	else
		print("Signal State:  Red  ")
	end
end

-- end functions

-- reset terminal
term.clear()

shell.run('debug.lua')
shell.run('bundle.lua')

setDebug(nil, 4)

-- reset cable
rs.setBundledOutput(cable_output, 0)

-- initial print
restoreState()
updateState()
printState()

while true do
	printHeader()

	local event, param = os.pullEvent()
	
	if event == "char" then
		if string.lower(param) == "q" then
			term.clear()
			term.setCursorPos(1, 1)
			break
		end
		if string.lower(param) == "d" then
			toggleDebug()
		end
	end
	
	if event == "redstone" then
		local input_state = rs.getBundledInput(cable_input)

		if colors.test(input_state, cable_input_red2) then
			if not raise_state_red2 then
				debugPrint("Raising Red ...")
				raise_state_red2 = true
			end
			-- react on active cable (signal instantly to red)
			state_signal = false
		else
			if raise_state_red2 then
				debugPrint("Falling Red ...")
				raise_state_red2 = false
			end
		end
		
		if colors.test(input_state, cable_input_green2) then
			if not raise_state_green2 then
				debugPrint("Raising Green ...")
				raise_state_green2 = true
			end
		else
			if raise_state_green2 then
				debugPrint("Falling Green ...")
				raise_state_green2 = false
				
				-- react on falling edge (signal to green)
				state_signal = true
			end
		end
	end

	updateState()
	printState()
end

-- reset cable on exit
rs.setBundledOutput(cable_output, 0)

-- eof
